# CI Workflow
# This workflow runs linting, type checking, and testing (pytest with coverage),
# builds documentation, and deploys it to GitHub Pages.
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    paths-ignore:
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.12"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run lint
        run: hatch run lint

  tests:
    name: ${{ matrix.tests }} py-${{ matrix.python }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12", "3.11", "3.10"]
        tests: [pytest, mypy, xdoc]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # TODO: check
      - name: Setup pip cache directory
        run: mkdir -p ~/.cache/pip
        if: runner.os == 'macOS'

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ matrix.python }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}|pip|${{ matrix.python }}|
          enableCrossOsArchive: true
          fail-on-cache-miss: false

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Run pytest and coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:test

      - name: Run coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:cov

      - name: Upload coverage report
        if: matrix.tests == 'pytest'
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run mypy
        if: matrix.tests == 'mypy'
        run: hatch run tests.py${{ matrix.python }}:type

      - name: Run xdoctest
        if: matrix.tests == 'xdoc'
        run: hatch run tests.py${{ matrix.python }}:xdoc

  testpypi:
    needs: [pre-commit, tests]
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump:')"
    outputs:
      version: ${{ steps.version.outputs.ver }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Get version
        id: version
        run: |
          echo ${{ github.event.head_commit.message }}
          ver=`echo ${{ github.event.head_commit.message }} | awk '{ print $NF }'`
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "ver=${ver}" >> $GITHUB_ENV

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip

      - name: Run CLI
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ clophfit==${{ env.ver }}
          ppr --version
          ppr -o out2 tecan tests/Tecan/list.pH
          cat out2/pH/metadata-labels.txt

  release:
    name: Release to GitHub
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # bodyFile: "release.md"
          tag: v${{ needs.testpypi.outputs.version }}

  publish:
    name: Publish to PyPI
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Build and publish
        run: |
          pipx run hatch build
          pipx run hatch publish --user=__token__ --auth=${{ secrets.PYPI_TOKEN }}

  docs_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.11 # TODO: Restore 3.12 when pytensor support numpy-2

      - name: Install binaries for docs
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
          sudo apt-get install -y plantuml
          sudo apt-get install -y libopenblas-dev

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          enableCrossOsArchive: true

      - name: Install pip and hatch
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Run hatch
        run: hatch run docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: "./docs/_build"

  docs_deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [docs_build]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  auto_merge_deps:
    name: Auto Merge dependencies labeled PRs
    needs: [pre-commit, tests, docs_build]
    # Run only on pull_request labeled dependencies (e.g. by dependabot) or
    # with the pre-commit ci commit message.
    if: >
      startsWith(github.event.pull_request.title, 'build(pre-commit): update hooks') ||
      contains(github.event.pull_request.labels.*.name, 'dependencies')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: squash
          DELETE_BRANCH_AFTER_MERGE: true
          LOG: "TRACE" # or DEBUG
