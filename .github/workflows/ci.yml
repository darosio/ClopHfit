# Run lint, mypy and xdoctest, and pytest with coverage
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    paths-ignore:
      - "docs/**"
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.11"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}
      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip
          pip install --constraint=.github/workflows/constraints.txt hatch
          pip --version
          hatch --version
      - name: Run
        run: hatch run lint

  checks:
    name:
      Mypy and xdoctest ${{ matrix.python }} on ${{ startsWith(matrix.os,
      'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' ||
      'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip
          pip install --constraint=.github/workflows/constraints.txt hatch
          pip --version
          hatch --version
      - name: Run
        run: |
          hatch run tests.py${{ matrix.python }}:type
          hatch run tests.py${{ matrix.python }}:xdoc

  tests:
    name: Tests Python-${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install pip
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install
        run: |
          pip install .[tests]
      - name: Run test
        run: |
          coverage run -p -m pytest
          coverage combine
          coverage report
          coverage xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.4

  testpypi:
    needs: [pre-commit, checks, tests]
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump:')"
    outputs:
      version: ${{ steps.version.outputs.ver }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}
      - name: Get version
        id: version
        run: |
          echo ${{ github.event.head_commit.message }}
          ver=`echo ${{ github.event.head_commit.message }} | awk '{ print $NF }'`
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "ver=${ver}" >> $GITHUB_ENV
      - name: Run ppr
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ clophfit==${{ env.ver }}
          ppr --version
          ppr -o out2 tecan tests/Tecan/list.pH
          cat out2/pH/metadata-labels.txt

  release:
    name: Release to github
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # bodyFile: "release.md"
          tag: v${{ needs.testpypi.outputs.version }}

  publish:
    name: Publish to PyPI
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}
      - name: Build and publish
        run: |
          pipx run hatch build
          pipx run hatch publish --user=__token__ --auth=${{ secrets.PYPI_TOKEN }}
