[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{ name = "daniele arosio", email = "daniele.arosio@cnr.it" }]
classifiers = [
  "Environment :: Console",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Unix Shell",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Development Status :: 3 - Alpha",
]
dependencies = [
  "arviz>=0.22.0",
  "click>=8.3.0",
  "corner>=2.2.3",
  "emcee>=3.1.6",
  "lmfit>=1.3.4",
  "matplotlib>=3.10.7",
  "openpyxl>=3.1.5",
  "pandas>=2.3.3",
  "pymc>=5.25.1", # pytensor will load numpy < 2
  "scipy>=1.16.2",
  "seaborn>=0.13.2",
  "sympy>=1.14.0",
  "tqdm>=4.67.1",
  "xlrd>=2.0.2",
]
description = "Cli for fitting macromolecule pH titration or binding assays data e.g. fluorescence spectra."
keywords = ["svd", "ClopHensor", "data fitting", "pH", "macromolecule binding"]
license = "BSD-3-Clause"
name = "clophfit"
readme = "README.md"
requires-python = ">=3.12"
version = "0.12.0"

[project.optional-dependencies]
docs = [
  "autodocsumm>=0.2.14",
  "graphviz>=0.21",
  "ipykernel>=7.0.1",
  "jupyter>=1.1.1",
  "nbsphinx>=0.9.7",
  "pydata-sphinx-theme>=0.16.1",
  "pygments>=2.19.2",
  "sphinx-autodoc-typehints >= 3.0.1,<3.2", # TODO: wait nbsphinx
  "sphinx-click>=6.1.0",
  "sphinx >=8.1.3,<8.2", # TODO: wait nbsphinx
  "sphinxcontrib-plantuml>=0.31",
]

[dependency-groups]
dev = [
  "git-cliff>=2.10.1",
  "mdformat>=0.7.22",
  "mdformat-gfm>=0.4.1",
  "pylsp-mypy>=0.7.0",
  "ruff>=0.14.0",
  "python-lsp-ruff>=2.3.0",
  "cruft>=2.16.0",
]
lint = [
  "pre-commit==4.3.0",
]
tests = [
  "coverage[toml]>=7.10.7",
  "mypy>=1.18.2",
  "pandas-stubs>=2.3.2.250926",
  "pygments>=2.19.2", # color xdoctest
  "pytest>=8.4.2",
  "scipy-stubs>=1.16.2.3",
  "types-click>=7.1.8",
  "types-setuptools>=80.9.0.20250822",
  "xdoctest>=1.3.0",
]

[project.scripts]
"clop" = "clophfit.__main__:clop"
"fit-titration" = "clophfit.__main__:fit_titration"
"note_to_csv" = "clophfit.__main__:note2csv"
"ppr" = "clophfit.__main__:ppr"

[project.urls]
"Bug Tracker" = "https://github.com/darosio/ClopHfit/issues"
Changelog = "https://github.com/darosio/ClopHfit/blob/main/CHANGELOG.md"
# Discussions = "https://github.com/darosio/ClopHfit/discussions"
Documentation = "https://clophfit.readthedocs.io"
"Github releases" = "https://github.com/darosio/ClopHfit/releases"
Homepage = "https://github.com/darosio/ClopHfit"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
# fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
omit = ["*__init__.py", "*/old/*", "types.py"]
source = ["clophfit"]

[tool.isort]
combine_as_imports = true
force_single_line = false
include_trailing_comma = true
known_first_party = "clophfit"
line_length = 88 # to match black's default line length
multi_line_output = 3
profile = "black"

[tool.mypy]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = "src/clophfit/old"
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_unreachable = true
warn_unused_configs = true

# TODO: check
[tool.pydoclint]
check-class-attributes = false

[tool.pylsp-mypy]
dmypy = false
enabled = true
live_mode = true
strict = true

[tool.ruff]
extend-exclude = ["src/clophfit/old/", "scripts/"]
extend-include = ["*.ipynb"]
fix = true
force-exclude = true
line-length = 88
target-version = "py312"
unsafe-fixes = true
# Enable preview mode
preview = false

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = ["ANN201", "E501", "ISC001", "T20", "INP", "G", "FBT", "PYI"]
select = [
  "A", # builtins
  "AIR", # airflow
  "ANN", # typing annotation
  "ARG", # unused arguments
  "ASYNC",
  "B", # bugbear
  "BLE", # blind-except
  "C",
  "C4", # comprehensions
  "C90", # mccabe
  "D", # pydocstyle
  "DOC",
  "DTZ", # dates
  "E", # pycodestyle
  "EM", # exceptions
  "ERA", # eradicate
  "EXE",
  "F", # pyflakes
  "FA", # future annotations
  "FBT", # boolean-trap
  "FLY", # flyntp
  "FURB", # refurbishing and modernizing
  "G", # logging
  "I", # isort
  "ICN", # import conventions (opinionated)
  "INP", # inplict namespace
  "INT", # gettext
  "ISC", # implicit-str-concat
  "LOG", # logging
  "N", # pep8-naming
  "NPY",
  "PD", # pandas-vet
  "PERF", # pperformance anti pattern
  "PGH", # pygrep WAIT
  "PIE",
  "PL", # pylint see PLR2004...
  "PT", # pytest-style
  "PTH", # use-pathlib
  "PYI", # lint typeshed
  "Q", # quotes
  "RET", # Return
  "RSE", # Raise
  "RUF", # Ruff
  "S", # bandit
  "SIM", # simplify
  "SLF", # private self
  "SLOT", # __slot__
  "T10", # debugger
  "T20", # print
  "TC", # TYPE_CHECKING
  "TCH", # TYPE_CHECKING
  "TID", # tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle
  "YTT", # 2020
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false
known-first-party = ["clophfit"]
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
  "ARG",
  "ERA",
  "N802",
  "N803",
  "N806",
  "N816",
  "ANN001",
  "ANN002",
  "ANN003",
  "ANN202",
  "D103",
  "ICN001",
  "PD901",
  "PLR0913",
  "PLR2004",
  "SLF001",
]
"__init__.py" = ["I002"] # don't need annotations
"docs/*" = ["INP"]
"tests/*" = ["PLR2004", "S101"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.typos]

[tool.typos.default]
extend-ignore-re = [
  "\"id\":\\s*\"[^\"]+\"", # Ignore specific patterns such as "id": "XXXX" in JSON
  "\"metadata\":\\s*\\{[^}]*\\}", # Ignore all metadata fields inside .ipynb cells
]


[tool.typos.default.extend-words]
arange = "arange"
arosio = "Arosio"
setp = "setp"
